
application {
  config {
    baseName entMefpaiv2,
    applicationType monolith,
    packageName sn.thiane.mefpai.ent,
    authenticationType jwt,
    prodDatabaseType mysql,
    devDatabaseType mysql,
    databaseType sql,
    clientFramework angularX,
    buildTool maven,
    languages [fr,en],
    nativeLanguage fr,
	serverPort 9090
  }
  entities *
}

////////////////////////////////////////////////Entities//////////////////////////////////////////
///////////////Pedagogie-Entities//////////////
entity Cours {
	libelleCours String required unique     
	
}
entity Classe{
    titre String required unique,
    niveauEtude NiveauEtude required,
    autreNiveau String
}
enum NiveauEtude{
    Seconde, Premiere, Terminale, CAP1, CAP2, CAP3, BEP1,
    BEP2, BT1, BT2, BT3, BTS1, BTS2, Autres
}
entity Salle{
    libelleSalle String required
}
entity Matiere{
    intituleMatiere String required
}
entity Groupe{
    nomGroupe String required unique
}
entity Seance {
    jourSeance Jour required,
    dateSeance LocalDate required,
    dateDebut Instant required,
    dateFin Instant required
}
enum Jour{
Lundi, Mardi, Mercredi, Jeudi, Vendredi, Samedi, Dimanche
}
entity Contenu{
    nomContenu String
    contenu AnyBlob
}
entity Syllabus{
    nomSyllabus String required,
    syllabus AnyBlob
}
entity Absence{
    motif String required,
    justifie Boolean required
}
///////////////Users-Entity//////////////
entity Apprenant {
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob,
  dateNaissance LocalDate required,  
  lieuNaissance String required
  } 
  enum Sexe {
  Masculin,
  Feminin
  }

entity Surveillant{
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
}
entity Directeur{
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
}
entity Proviseur{
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
}
entity Inspecteur{
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
}

entity Professeur {
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
  specialite String required,
  niveauEnseign NiveauEnseignement required
  } 
  enum NiveauEnseignement {
   LyceeTech, CentreFP
  }
  
  entity Parent {
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
  } 

entity Mefpai{
  nom String required,
  prenom String required,
  @unique
  @email
  email String required,
  adresse String required,
  @unique 
  telephone String required,
  sexe Sexe required,
  photo ImageBlob 
  } 

////////////Parametrage-Entities///////////
 entity Etablissement{
  nomEtab String required,
  typeEtab TypeEtab required,
  @unique
  @email
  email String required,
  @unique 
  telephone String required,
  }
 enum TypeEtab {
  LyceeTech,
  CentreFP
}

entity Filiere{
//On veut creer une enumeration de la liste des filieres
nomFiliere NomFiliere required,
niveauQualif Qualification required,
autreFiliere String,
autreQualif String
}
enum NomFiliere
{
Agriculture,
Peche,
Elevage,
Mine_carrieres,
Artisanat,
Batimat_Travaux_Publiques,
Mecanique,
Menuiserie_Bois,
Habillement,
Agroalimentaire,
Electrotechnique_Electrique_Energetique,
Hydraulique,
Structure_Metallique,
Structure_Plastique,
Beaute_Esthetique,
Developpement_Territorial,
Droit,
Economie_Gestion_Commerce_Logistique,
Insdustrie_culturelle_et_creative,
Informatique_et_numerique,
Restauration_et_hotellorie,
Sante_biologie_chimie,
Sport,
Tourisme,
Environnement,
Autres
}
enum Qualification{
CPS, CAP, BEP, BT, METP, BTS, CQP, BTI, TitreProf, CAEP, TS, Autres
}

entity Serie{
nomSerie NomSerie required,
autreSerie String
}
enum NomSerie{
STEG, STIDD_M, STIDD_E, S3, S4, S5, F6, Autres
}

entity Programme{
nomProgram String required,
contenuProgram AnyBlob,
Annee LocalDate required
}
entity Region{
nomRegion NomRegion required,
autreRegion String
}
enum NomRegion {
Dakar, Thies, Saint_Louis, Diourbel, Louga, Fatick, Kaffrine, 
Kaolack, Matam, Tambacounda, Kedougou, Kolda, Ziguinchor, Sedhiou, Autres
}
entity Departement{
nomDept NomDept required,
autreDept String
}
enum NomDept{
Dakar, Pikine, Rufisque, Guediawaye, Keur_Massar,
Thies, Mbour, Tivaoune,
Saint_Louis, Dagana, Podor,
Diourbel, Mbacke, Bambey,
Louga, Linguere, Kebemer,
Fatick, Foundiougne, Gossas,
Kaffrine, Birkelane, Koungheul, Malem_Hodar,
Kaolack, Guinguineo, Nioro_du_Rip,
Matam, Kanel, Ranerou,
Tambacounda, Bakel, Goudiry, Koumpentoum,
Kedougou, Salemata, Saraya,
Kolda, Velingara, Medina_Yoro_Foulah,
Sedhiou, Bounkiling, Goudomp,
Ziguinchor, Bignona, Oussouye, Autres
}
entity Commune {
nomCom String required
}
entity Inspection{
nomInspec String required,
typeInspec TypeInspec required,
@unique
@email
email String required,
@unique 
telephone String required,
}
enum TypeInspec{
IA, IEF
}
//////////////Ressources-Entities////////////
entity Ressource{
  libelRessource String required,
  typeRessource TypeRessource required,
  lienRessource AnyBlob required,
  dateMise Instant
  }
  enum TypeRessource{
  SupportCours,
  Evaluation,
  AppliPeda
  }
  /////////////Evaluation-Entities////////
  entity Evaluation{
	nomEvalu String required,
	typeEvalu TypeEvalu required,
	dateEva LocalDate required,
	heureDebEva Instant required,
	heureFinEva Instant required
}
enum  TypeEvalu{
 Devoir,
 Test
}
entity Note
{
	uneNote Integer required
}
/////////////////////////////////////Relationships////////////////////////////////////
//////////OneToOne/////////
relationship OneToOne{
////Pedagogie
Seance{Contenu(nomContenu)} to Contenu,  
////Users
Proviseur{User(login)} to User,
Directeur{User(login)} to User,
Surveillant{User(login)} to User,
Inspecteur{User(login)} to User,
Parent{User(login)} to User,
Professeur{User(login)} to User,
Apprenant{User(login)} to User,
Mefpai{User(login)} to User
////Parametrage
Inspection{Commune(nomCom)} to Commune,  
Programme{Filiere(nomFiliere)} to Filiere,
Programme{Serie(nomSerie)} to Serie,
Etablissement{Proviseur(nom)} to Proviseur,
Etablissement{Directeur(nom)} to Directeur,
Etablissement{Commune(nomCom)} to Commune,
Inspection{Inspecteur(nom)} to Inspecteur
///Evaluation
Note{Apprenant(nom)} to Apprenant
}
/////////OneToMany
relationship OneToMany{
////Pedagogie
Cours to Seance{Cours(libelleCours)},
Matiere to Cours{Matiere(intituleMatiere)},
Salle to Seance{Salle(libelleSalle)},
Groupe to Seance{Groupe(nomGroupe)},
Classe to Cours{Classe(titre)},
Classe to Groupe{Classe(titre)},
Groupe to Apprenant{Groupe(nomGroupe)},
Apprenant to Absence{Apprenant(nom)},
Programme to Syllabus{Programme(nomProgram)},
Etablissement to Professeur{Etablissement(nomEtab)},
Professeur to Cours{Professeur(nom)},
Filiere to Classe{Filiere(nomFiliere)},
Serie to Classe{Serie(nomSerie)},
Syllabus to Cours{Syllabus(nomSyllabus)}
////Ressource
Apprenant to Ressource{Apprenant(nom)},
Groupe to Ressource{Groupe(nomGroupe)},
Cours to Ressource{Cours(libelleCours)},
Surveillant to Ressource{PersoAdmin(nom)},
Proviseur to Ressource{Proviseur(nom)},
Directeur to Ressource{Directeur(nom)},
Inspecteur to Ressource{Inspecteur(nom)}
////Users
Parent to Apprenant{Parent(nom)}
////Parametrage
Departement to Commune{Departement(nomDept)},
Region to Departement{Region(nomRegion)},
Inspection to Etablissement{Inspection(nomInspec)},
Etablissement to Filiere{Etablissement(nomEtab)},
Etablissement to Serie{Etablissement(nomEtab)},
Programme to Matiere{Programme(nomProgram)},
Matiere to Syllabus{Matiere(intituleMatiere)},
Proviseur to Classe{Proviseur(nom)},
Directeur to Classe{Directeur(nom)},
Surveillant to Classe{Surveillant(nom)},
Professeur to Classe{Professeur(nom)}
////Evaluation

Evaluation to Note{Evaluation(nomEvalu)},
Evaluation to Absence{Evaluation(nomEvalu)},
Matiere to Evaluation{Matiere(intituleMatiere)},
Groupe to Evaluation{Groupe(nomGroupe)},
Professeur to Evaluation{Professeur(nom)},
Salle to Evaluation{Salle(libelleSalle)}

}

///////////ManyToOne
relationship ManyToOne{
////Pedagogie
Absence to Seance{Absence},

}

//////////ManyToMany
////Ressources & Evaluation
relationship ManyToMany{
Etablissement{Ressource(libelRessource)} to Ressource{Etablissement(nomEtab)},
Surveillant{Evaluation(nomEvalu)} to Evaluation{Surveillant(nom)}

}
// Set pagination options
paginate * with pagination
